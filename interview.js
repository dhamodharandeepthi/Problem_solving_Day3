/*
input: 6
output:
1 + 2 + 3
1 + 5
2 + 4
6

*/
//Recursive approach

function solve(n, ind, sum, arr) {
  console.log(n, ind, sum, arr);

  if (sum == n) {
    console.log(arr.join(" + "));
    return;
  }
  if (ind > n) return;

  if (sum > n) return;
  solve(n, ind + 1, sum + ind, [...arr, ind]);
  solve(n, ind + 1, sum, [...arr]);
}

function sumTill(n) {
  solve(n, 1, 0, []);
}

sumTill(6);

/*  *
n  ind sum  arr

6   1   0   []
6   2   1   [ 1 ]
6   3   3   [ 1, 2 ]
6   4   6   [ 1, 2, 3 ]

1   +   2   + 3 //6

6   4   3   [ 1, 2 ]
6   5   7   [ 1, 2, 4 ]
6   5   3   [ 1, 2 ]
6   6   8   [ 1, 2, 5 ]
6   6   3   [ 1, 2 ]
6   7   9   [ 1, 2, 6 ]
6   7   3   [ 1, 2 ]
6   3   1   [ 1 ]
6   4   4   [ 1, 3 ]
6   5   8   [ 1, 3, 4 ]
6   5   4   [ 1, 3 ]
6   6   9   [ 1, 3, 5 ]
6   6   4   [ 1, 3 ]
6   7   10   [ 1, 3, 6 ]
6   7   4   [ 1, 3 ]
6   4   1   [ 1 ]
6   5   5   [ 1, 4 ]
6   6   10   [ 1, 4, 5 ]
6   6   5   [ 1, 4 ]
6   7   11   [ 1, 4, 6 ]
6   7   5   [ 1, 4 ]
6   5   1   [ 1 ]
6   6   6   [ 1, 5 ]

1   +   5   //6

6   6   1   [ 1 ]
6   7   7   [ 1, 6 ]
6   7   1   [ 1 ]
6   2   0   []
6   3   2   [ 2 ]
6   4   5   [ 2, 3 ]
6   5   9   [ 2, 3, 4 ]
6   5   5   [ 2, 3 ]
6   6   10   [ 2, 3, 5 ]
6   6   5   [ 2, 3 ]
6   7   11   [ 2, 3, 6 ]
6   7   5   [ 2, 3 ]
6   4   2   [ 2 ]
6   5   6   [ 2, 4 ]

2   +   4   //6

6   5   2   [ 2 ]
6   6   7   [ 2, 5 ]
6   6   2   [ 2 ]
6   7   8   [ 2, 6 ]
6   7   2   [ 2 ]
6   3   0   []
6   4   3   [ 3 ]
6   5   7   [ 3, 4 ]
6   5   3   [ 3 ]
6   6   8   [ 3, 5 ]
6   6   3   [ 3 ]
6   7   9   [ 3, 6 ]
6   7   3   [ 3 ]
6   4   0   []
6   5   4   [ 4 ]
6   6   9   [ 4, 5 ]
6   6   4   [ 4 ]
6   7   10   [ 4, 6 ]
6   7   4   [ 4 ]
6   5   0   []
6   6   5   [ 5 ]
6   7   11   [ 5, 6 ]
6   7   5   [ 5 ]
6   6   0   []
6   7   6   [ 6 ]

6      //6

6   7   0   []
 
*/
